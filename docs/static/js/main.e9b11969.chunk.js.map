{"version":3,"sources":["componentes/AgregaGenero.js","componentes/InfoVideojuego.js","funciones/funcionesVj.js","componentes/ResultadoVideojuegos.js","hooks/useFetchVideojuegos.js","VideojuegosApp.js","index.js"],"names":["AgregaGenero","setGeneros","useState","inputValue","setInputValue","onSubmit","e","preventDefault","console","log","trim","length","generosActuales","type","value","onChange","target","InfoVideojuego","juego","className","src","imagen","alt","nombre","rating","metacritic","getVideojuegos","genero","a","url","encodeURI","fetch","respuesta","json","results","juegos","map","id","name","background_image","ResultadoVideojuegos","infoVj","loading","state","setState","useEffect","then","resVj","useFetchVideojuegos","infoJuego","VideojuegosApp","generos","ReactDOM","render","document","getElementById"],"mappings":"+LAIaA,EAAe,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,WAAgB,EAINC,mBAAS,uBAJH,mBAInCC,EAJmC,KAIvBC,EAJuB,KA6B1C,OAQI,aAPA,CAOA,QAAMC,SAzBW,SAACC,GAGlBA,EAAEC,iBACFC,QAAQC,IAAI,qBAETN,EAAWO,OAAOC,OAAS,IAG1BV,GAAY,SAAAW,GAAe,OAAKT,GAAL,mBAAoBS,OAE/CR,EAAc,MAclB,SAQI,uBACIS,KAAK,OACLC,MAAOX,EACPY,SAzCc,SAACT,GACvBF,EAAcE,EAAEU,OAAOF,aCTlBG,EAAiB,SAAC,GAAa,IAAZC,EAAW,EAAXA,MAC5B,OAGI,cAFA,CAEA,OAAKC,UAAU,OAAf,UACI,qBAAKC,IAAOF,EAAMG,OAAQC,IAAKJ,EAAMK,SACrC,4BAAIL,EAAMK,SACV,yCAAYL,EAAMM,UAClB,6CAAgBN,EAAMO,kB,uBCTrBC,EAAc,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAGpBC,EAAM,6EAA+EC,UAAUH,GAH3E,SAKFI,MAAMF,GALJ,cAKpBG,EALoB,gBAOAA,EAAUC,OAPV,uBAOlBC,EAPkB,EAOlBA,QAEFC,EAASD,EAAQE,KAAI,SAAAlB,GACvB,MAAO,CACHmB,GAAInB,EAAMmB,GACVd,OAAQL,EAAMoB,KACdjB,OAAQH,EAAMqB,iBACdf,OAAQN,EAAMM,OACdC,WAAYP,EAAMO,eAfA,kBAkBnBU,GAlBmB,4CAAH,sDCIdK,EAAuB,SAAC,GAAc,IAAbb,EAAY,EAAZA,OAAY,ECFf,SAACA,GAAW,MAGjBzB,mBAAS,CAC/BuC,OAAQ,GACRC,SAAS,IAL8B,mBAGpCC,EAHoC,KAG7BC,EAH6B,KA2B3C,OAdAC,qBAAW,WAGPnB,EAAeC,GACVmB,MAAM,SAAAC,GACHvC,QAAQC,IAAIsC,GAEZH,EAAS,CACLH,OAAQM,EACRL,SAAS,SAGtB,CAACf,IAEGgB,EDtBmBK,CAAoBrB,GAAvCc,EAHuC,EAGvCA,OAAQC,EAH+B,EAG/BA,QAEf,OACI,qCACI,6BAAKf,IAMHe,EAAU,4CAAqB,KAEjC,qBAAKvB,UAAU,YAAf,SAMQsB,EAAOL,KAAK,SAAAa,GAAS,OACjB,cAAC,EAAD,CAEI/B,MAAO+B,GADFA,EAAUZ,aEzB9Ba,EAAiB,WAAM,MAGFhD,mBAAS,CAAC,WAHR,mBAGzBiD,EAHyB,KAGhBlD,EAHgB,KAgBhC,OACI,qCACI,uDAKA,cAAC,EAAD,CAAcA,WAAcA,IAC5B,uBAKA,6BAEQkD,EAAQf,KAAK,SAAAT,GAAM,OAIf,aAHA,CAGC,EAAD,CAEIA,OAAQA,GADHA,YClCjCyB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.e9b11969.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n//Desestructuramos los argumentos del componente para recibir la función setGeneros\r\nexport const AgregaGenero = ({setGeneros}) => {\r\n\r\n    //En la variable inputValue siempre vamos a tener el último valor que el usuario escribió en \r\n    // el input text.\r\n    const [inputValue, setInputValue] = useState('Indica el Género');\r\n\r\n    //Esta función se invoca cada vez que se detecta el evento onChange en el input text.\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    //Esta función se invoca cada vez que se presiona la tecla enter en el input text.\r\n    const handleSubmit = (e) => {\r\n        //La función preventDefault() nos sirve para que el formulario no refresque la página\r\n        // ya que es un comportamiento que no queremos tener.\r\n        e.preventDefault();\r\n        console.log('Se hizo submit...');\r\n\r\n        if(inputValue.trim().length > 4){\r\n            //Mandamos llamar la función setGeneros que recuperamos de los argumentos del componente. Primero agregamos\r\n            // el ultimo valor que escribió el usuario y al final las que ya teníamos.\r\n            setGeneros( generosActuales => [inputValue, ...generosActuales] );\r\n            //Limpiamos input value\r\n            setInputValue('');\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    return (\r\n        /*\r\n            Quitamos el fragment <></> y lo cambiamos por un form para poder invocar la función\r\n             de handleSubmit.\r\n            Hay que recordar que el fragment sólo nos sirve para agrupar varios elementos de un\r\n             html, es como un <div> pero sin que nos pinte dicho div en el código html y nos coupe un\r\n             espacio innecesario.\r\n        */\r\n        <form onSubmit={handleSubmit}>\r\n            {/*\r\n                Creamos un input text para que el usuario escriba el género de videojuegos que quiere\r\n                 agregar a la lista, y hacemos un binding a la variable inputValue en la que vamos a guardar\r\n                 lo que escriba el usuario en este input text.\r\n                Cada vez que se escriba algo en el input text se manda llamar la función handleInputCange la\r\n                 cual va actualizar el estado de la variable inputValue.\r\n            */}\r\n            <input \r\n                type=\"text\" \r\n                value={inputValue}\r\n                onChange={ handleInputChange  }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\n//Configuramos los props del componente\r\nAgregaGenero.propTypes = {\r\n    setGeneros: PropTypes.func.isRequired\r\n}","import React from 'react';\r\n\r\n//Recibimos como parámetro el juego que queremos mostrar.\r\nexport const InfoVideojuego = ({juego}) => {\r\n    return(\r\n        //Mostramos la información del juego. Se utiliza la propieda 'className' en lugar de 'class' para indicar el\r\n        // estilo del elemento porque 'class' es una palabra reservada en JavaScript.\r\n        <div className=\"card\">\r\n            <img src = {juego.imagen} alt={juego.nombre} />\r\n            <p>{juego.nombre}</p>\r\n            <p>Rating: {juego.rating}</p>\r\n            <p>Metacritic: {juego.metacritic}</p>\r\n        </div>\r\n    )\r\n}","//Invocamos el api de RAWG para obtener los videojuegos del género proporcionado en los parámetrs del\r\n// componente.\r\nexport const getVideojuegos = async (genero) => {\r\n    //URL del api de RAWG que validamos en postman. Le concatenamos el genero que recibimos como parámetro\r\n    // en el componente.\r\n    const url = 'https://api.rawg.io/api/games?key=db2d53b4e0ef446f8126054ba6cdbbf5&genres=' + encodeURI(genero);\r\n    //Utilizamos Fetch API para invocar la url.\r\n    const respuesta = await fetch(url);\r\n    //Recuperamos el JSON de la respuesta, el cual contiene la información de los videojuegos.\r\n    const { results } = await respuesta.json();\r\n    //Obtenemos solamente la información que vamos a necesitar del json de la respuesta.\r\n    const juegos = results.map(juego => {\r\n        return {\r\n            id: juego.id,\r\n            nombre: juego.name,\r\n            imagen: juego.background_image,\r\n            rating: juego.rating,\r\n            metacritic: juego.metacritic\r\n        }\r\n    });\r\n    return juegos;   \r\n}","import React from 'react';\r\nimport { InfoVideojuego } from './InfoVideojuego';\r\nimport { useFetchVideojuegos } from '../hooks/useFetchVideojuegos';\r\n\r\n//Recibe como argumento el género que se va utilizar para hacer la búsqueda de los videojuegos\r\n// utilizando el API de RAWG\r\nexport const ResultadoVideojuegos = ({genero}) => {\r\n\r\n    //Utilizamos el custom hook useFetchVideojuegos\r\n    const {infoVj, loading} = useFetchVideojuegos(genero);\r\n\r\n    return(\r\n        <>\r\n            <h3>{genero}</h3>\r\n\r\n            {/*\r\n                Mostramos el mensaje \"Cargando...\" en base a la bandera 'loading' que contramos en el\r\n                 custom hook useFetchVideojuegos\r\n            */}\r\n            { loading ? <p>Cargando...</p> : null }\r\n\r\n            <div className=\"card-grid\">            \r\n                {/*\r\n                    Creamos la lista de juegos con la información que recuperamos de la invocación del api de RAWG,\r\n                    utilizando la variable infoJuegos que obtuvimos en la desestructuración del hook useState.\r\n                */}\r\n                {                \r\n                    infoVj.map( infoJuego => (\r\n                        <InfoVideojuego \r\n                            key={infoJuego.id}\r\n                            juego={infoJuego}\r\n                        />\r\n                    ))\r\n                }\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}","import { useState, useEffect } from \"react\";\r\nimport { getVideojuegos } from '../funciones/funcionesVj';\r\n\r\n//El custom hook se va llamar useFetchVideojuegos.\r\nexport const useFetchVideojuegos = (genero) => {\r\n    //Establecemos el estado inicial del hook. Cuando utilizemos por primera vez el hook\r\n    // useFecthVideojuegos, va tener este estado inicial.\r\n    const [state, setState] = useState({\r\n        infoVj: [],\r\n        loading: true\r\n    });\r\n\r\n    //Utilizamos useEffect para invocar la función getVideojuegos. El segundo argumento que recibe useEffect\r\n    // es una lista de dependencias. Si esa lista se manda vacía, el useEffect se va invocar solamente una vez\r\n    // lo cual evitaría que tengamos incongruencias si por ejemplo estamos guardando información en una base\r\n    // de datos cada vez que se manda llamar el método getVideojuegos o simplemente no queremos que se esté\r\n    // invocando la llamada al api de RAWG cada vez que algo se actualice en el componente.\r\n    useEffect( () => {\r\n        //Invocamos la función que mudamos a funcionesVj.js. Esta función es un async por lo cual devuelve\r\n        // un Promise\r\n        getVideojuegos(genero)\r\n            .then( resVj => {\r\n                console.log(resVj);\r\n                //Invocamos la función setState que declaramos en la desestructuración de useState.\r\n                setState({\r\n                    infoVj: resVj,\r\n                    loading: false\r\n                });\r\n            })\r\n    }, [genero]);\r\n\r\n    return state;\r\n}","import React, { useState } from 'react';\r\nimport { AgregaGenero } from './componentes/AgregaGenero';\r\nimport { ResultadoVideojuegos } from './componentes/ResultadoVideojuegos';\r\n\r\nexport const VideojuegosApp = () => {\r\n\r\n    //Utilizamos el hook useState para inicializar la lista de generos de videojuegos.\r\n    const [generos, setGeneros] = useState(['action']);\r\n\r\n    //Función que nos permite cambiar el estado de la lista de géneros para agregar\r\n    // nuevos géneros a la lista.\r\n    const agregaGenero = () => {\r\n        //Se manda llamar la función setGeneros que regresa la desestructuración de useState. El \r\n        // parámetro estadoActualGeneros es el estado actual de useState, y lo que se hace es \r\n        // utilizar el operador \"...\" para obtener los elementos actuales del arreglo de géneros\r\n        // y se le agrega un nuevo valor al arreglo que estamos devolviendo, el cual será el nuevo\r\n        // estado de la lista. \r\n        setGeneros( estadoActualGeneros => [ ...estadoActualGeneros, 'Nuevo Género' ] );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h2>Portal de Videojuegos</h2>\r\n            {/*\r\n                Creamos una propiedad 'setGeneros' al componente AgregaGenero y le pasamos como valor la\r\n                 referencia de la función 'setGeneros' que obtuvimos en la desestructuración del useState\r\n            */}\r\n            <AgregaGenero setGeneros = {setGeneros}/>\r\n            <hr />            \r\n\r\n            {/*\r\n                Creamos la lista de géneros\r\n            */}\r\n            <ol>\r\n                {\r\n                    generos.map( genero => (\r\n                        //Reemplazamos el elemento <li> por la llamda al componente ResultadoVideojuegos, pasando\r\n                        // como parámetro el género. Se tiene que utilizar la propiedad key al igual que se hizo \r\n                        // con el elemento <li> anteriormente\r\n                        <ResultadoVideojuegos\r\n                            key={genero}\r\n                            genero={genero}\r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n\r\n        </>\r\n    )\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport { VideojuegosApp } from './VideojuegosApp';\n\nReactDOM.render(\n  <VideojuegosApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}